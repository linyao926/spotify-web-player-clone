@use './variables';

@mixin flex-center($direction: row, $justify: center, $align: center) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
}

@mixin bodySectionBase {
    height: 100%;
    background-color: var(--background-base);
    border-radius: variables.$border-radius-base;
    display: flex;
    flex-direction: column;
    position: relative;
}

@mixin pageContentBase {
    @include bodySectionBase;
    width: 100%;
    min-width: variables.$body-section-content-min-width;
    overflow: visible;
    padding-bottom: variables.$spacing-large;
}

@mixin imgBase($background: var(--background-base)) {
    display: block;
    aspect-ratio: 1;
    background: $background;
    border-radius: variables.$border-radius-img-base;
    flex-shrink: 0;
    object-fit: cover; 
    border: none; 
    outline: none;
}

@mixin sectionHeaderBase($background: var(--background-base)) {
    font-size: variables.$font-size-small;
    @include flex-center($justify: space-between, $align: flex-end);
    height: 48px;
    padding-bottom: variables.$spacing-base;
}
    
@mixin ellipsis-one-line{
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin ellipsis-multiline($max-lines: 2){
    display: -webkit-box;
    overflow: hidden;
    -webkit-line-clamp: $max-lines;
    -webkit-box-orient: vertical;
    text-overflow: ellipsis;
}

@mixin full-screen-overlay {
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    background-color: rgba(0, 0, 0, 0.9);
}

@mixin breakpoint($size) {
    @if $size == small {
        @media (max-width: 600px) { @content; }
    } @else if $size == medium {
        @media (max-width: 768px) { @content; }
    } @else if $size == large {
        @media (max-width: 1024px) { @content; }
    }
}

@mixin typography($size: 16px, $weight: 400, $lineHeight: 1.5, $color: #333) {
    font-size: $size;
    font-weight: $weight;
    line-height: $lineHeight;
    color: $color;
}

@mixin absolute-center($left: 50%, $top: 50%) {
    position: absolute;
    top: $top;
    left: $left;
    transform: translate(-50%, -50%);
}

@mixin box-shadow($x: 0px, $y: 2px, $blur: 8px, $color: rgba(0, 0, 0, 0.2)) {
    box-shadow: $x $y $blur $color;
}

@mixin border($width: 1px, $style: solid, $color: var(--essential-subdued)) {
    border: $width $style $color;
}


// Grid layout 
@mixin grid-container($item-height: 48px, $min-col-width: 270px) {
    display: grid;
    grid-gap: variables.$spacing-base;
    grid-auto-rows: $item-height;
    grid-template: auto / repeat(auto-fill, minmax(max($min-col-width, 25%), 1fr));
    grid-template-rows: $item-height;
}

@mixin dynamic-grid($template: default) {
    @if $template == default {
        grid-template-columns: 
            [index] var(--tracklist-index-column-width, 16px) 
            [first] minmax(120px, var(--col1, 6fr)) 
            [var1] minmax(120px, var(--col2, 4fr)) 
            [var2] minmax(120px, var(--col3, 3fr)) 
            [last] minmax(120px, var(--col4, 1fr));
    } @else if $template == four-cols {
        grid-template-columns: 
            [index] var(--tracklist-index-column-width, 16px)
            [first] minmax(120px, var(--col1, 4fr)) 
            [var1] minmax(120px, var(--col2, 2fr))
            [last] minmax(120px, var(--col3, 1fr)) 
    } @else if $template == three-cols {
        grid-template-columns: 
            [index] var(--tracklist-index-column-width, 16px) 
            [first] minmax(120px, var(--col1, 4fr)) 
            [last] minmax(120px, var(--col2, 1fr));
    } @else if $template == three-cols-non-index {
        grid-template-columns: 
            [first] minmax(120px, var(--col0, 4fr)) 
            [var1] minmax(120px, var(--col1, 2fr)) 
            [last] minmax(120px, var(--col2, 1fr));
    } @else if $template == two-cols {
        grid-template-columns: 
            [first] minmax(120px, var(--col0, 4fr)) 
            [last] minmax(120px, var(--col1, 1fr));
    } @else {
      @warn "Template type not recognized. Please provide a valid option.";
    }
}

// @else if $template == three-cols {
//     grid-template-columns: 
//       [index] var(--tracklist-index-column-width, 16px) 
//       [first] minmax(120px, var(--col1, 4fr)) 
//       [var1] minmax(120px, var(--col2, 2fr)) 
//       [last] minmax(120px, var(--col3, 1fr));
//   }

  